<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Cmake学习笔记（三）</title>
    <link href="/2024/01/22/Cmake%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2024/01/22/Cmake%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们在使用C++的时候，经常会使用到一些库，比如说<code>iostream</code>，<code>vector</code><br>等等，这些库都是在编译器中自带的，我们只需要在代码中<code>#include</code><br>就可以使用了，而有些库时是第三方库，所以需要我们自己调用，而这个过程由及其复杂，所以我们需要使用Cmake来帮助我们来实现这个过程。</p><h3 id="1-制作静态库与动态库"><a href="#1-制作静态库与动态库" class="headerlink" title="1.制作静态库与动态库"></a>1.制作静态库与动态库</h3><h4 id="1-1-制作静态库"><a href="#1-1-制作静态库" class="headerlink" title="1.1.制作静态库"></a>1.1.制作静态库</h4><p>在<strong>cmake</strong>中，制作静态库需要使用的命令如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_library</span>(库名 STATIC 源文件<span class="hljs-number">1</span> [源文件<span class="hljs-number">2</span>...])<br></code></pre></td></tr></table></figure><p>在windows中，静态库的名称为<code>库名.lib</code>，在linux中，静态库的名称为<code>lib库名.a</code>。</p><p>所以在一下文件夹中</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell">│  CMakeLists.txt<br>│  main.cpp<br>│<br>├─bin<br>│      demo.exe<br>│<br>├─build<br>├─include<br>│      head.h<br>│<br>└─src<br>        add.cpp<br>        div.cpp<br>        mult.cpp<br>        sub.cpp<br></code></pre></td></tr></table></figure><p>我们需要将这个文件的内容输出为一个静态库，我们需要在<code>CMakeLists.txt</code>中输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#cmake标准</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.27</span>)<br><span class="hljs-comment">#项目名称</span><br><span class="hljs-keyword">project</span>(demo)<br><br><span class="hljs-comment">#设置编译器</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><br><span class="hljs-comment">#添加头文件</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-keyword">include</span>)<br><br><span class="hljs-keyword">file</span>(GLOB SRC_LIST <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/*.cpp)<br><br><span class="hljs-comment">#输出静态库</span><br><span class="hljs-keyword">add_library</span>(demo STATIC <span class="hljs-variable">$&#123;SRC_LIST&#125;</span> )<br></code></pre></td></tr></table></figure><p>此时在build文件夹中就生成一个libdemo.a文件，这就是我们的静态库。</p><h4 id="1-2-制作动态库"><a href="#1-2-制作动态库" class="headerlink" title="1.2.制作动态库"></a>1.2.制作动态库</h4><p>在<strong>cmake</strong>中，制作动态库仅仅只需要将<code>add_library()</code>函数中的<code>STATIC</code>改为<code>SHARED</code>即可。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_library</span>(库名 SHARED 源文件<span class="hljs-number">1</span> [源文件<span class="hljs-number">2</span>...])<br></code></pre></td></tr></table></figure><p>在windows中，动态库的名称为<code>库名.dll</code>，在linux中，动态库的名称为<code>lib库名.so</code>。</p><h4 id="1-3修改输出路径"><a href="#1-3修改输出路径" class="headerlink" title="1.3修改输出路径"></a>1.3修改输出路径</h4><p>在上面的例子中，我们的静态库和动态库都是输出在build文件夹中，但是我们希望将其输出到我们想要的文件夹中，但cmake中可以使用CMAKE_LIBRARY_OUTPUT_DIRECTORY与CMAKE_ARCHIVE_OUTPUT_DIRECTORY这两个宏来实现。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib) <span class="hljs-comment">#动态库输出路径</span><br><br><span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib) <span class="hljs-comment">#静态库输出路径</span><br></code></pre></td></tr></table></figure><p>在CMakeLists.txt中加入这两句后运行cmake，就可以将库输出到lib文件夹中了。</p><div class="note note-secondary">            <p>注意：<br>在使用这两个宏时，需要在<code>add_library()</code>函数之前使用，否则无法生效。<br>若没有lib文件夹，系统会自动创建。</p>          </div><h3 id="2-链接库"><a href="#2-链接库" class="headerlink" title="2.链接库"></a>2.链接库</h3><p>在上面的例子中，我们已经成功的制作了静态库和动态库，但在日常生活中，我们如果使用这些库，所以我们就需要链接这些库。</p><h4 id="2-1-链接静态库"><a href="#2-1-链接静态库" class="headerlink" title="2.1.链接静态库"></a>2.1.链接静态库</h4><p>在<strong>cmake</strong>中，链接静态库需要使用<code>target_link_libraries()</code>函数，函数的第一个参数为需要链接的库，第二个参数为需要链接的库的名称。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">target_link_libraries</span>(可执行文件名 库名)<br></code></pre></td></tr></table></figure><p>在上面的例子中，我们需要链接静态库，所以我们需要在<code>CMakeLists.txt</code>中输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#cmake标准</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.27</span>)<br><span class="hljs-comment">#项目名称</span><br><span class="hljs-keyword">project</span>(demo)<br><br><span class="hljs-comment">#设置编译器</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><br><br><span class="hljs-comment">#添加头文件</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-keyword">include</span>)<br><br><span class="hljs-keyword">add_executable</span>(demo main.cpp)<br><br><span class="hljs-comment">#链接静态库</span><br><span class="hljs-keyword">target_link_libraries</span>(demo demo)<br></code></pre></td></tr></table></figure><p>但此时，发现在编译时会报错:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cannot find <span class="hljs-literal">-lcalc</span><br>collect2.exe: error: ld returned <span class="hljs-number">1</span> <span class="hljs-keyword">exit</span> status<br>mingw32<span class="hljs-literal">-make</span>.exe[<span class="hljs-number">2</span>]: *** [<span class="hljs-type">CMakeFiles</span>\<span class="hljs-type">demo.dir</span>\<span class="hljs-type">build.make</span>:<span class="hljs-number">99</span>: <span class="hljs-type">demo.exe</span>] Error <span class="hljs-number">1</span><br>mingw32<span class="hljs-literal">-make</span>.exe[<span class="hljs-number">1</span>]: *** [<span class="hljs-type">CMakeFiles</span>\<span class="hljs-type">Makefile2</span>:<span class="hljs-number">82</span>: <span class="hljs-type">CMakeFiles</span>/<span class="hljs-type">demo.dir</span>/<span class="hljs-type">all</span>] Error <span class="hljs-number">2</span><br>mingw32<span class="hljs-literal">-make</span>.exe: *** [<span class="hljs-type">Makefile</span>:<span class="hljs-number">90</span>: <span class="hljs-type">all</span>] Error <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>这是因为我们生成的库的目录不在系统的环境变量里，所以编译器不知道我们的静态库在哪里，所以我们需要在<code>CMakeLists.txt</code>中加入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#设置静态库路径</span><br><span class="hljs-keyword">link_directories</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib)<br></code></pre></td></tr></table></figure><p>此再在powershell中运行<code>cmake</code>,就不会报错了。</p><h4 id="2-2-链接动态库"><a href="#2-2-链接动态库" class="headerlink" title="2.2.链接动态库"></a>2.2.链接动态库</h4><p>动态库的链接和静态库一样，也是使用<code>target_link_libraries()</code>函数，只是函数的第二个参数为动态库的名字。</p><p>代码如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#cmake标准</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.15</span>)<br><span class="hljs-comment">#项目名称</span><br><span class="hljs-keyword">project</span>(demo)<br><br><span class="hljs-comment">#设置编译器</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><br><span class="hljs-comment">#添加头文件</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-keyword">include</span>)<br><br><span class="hljs-comment">#链接静态库地址</span><br><span class="hljs-keyword">link_directories</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib)<br><br><span class="hljs-keyword">add_executable</span>(demo main.cpp)<br><br><span class="hljs-keyword">target_link_libraries</span>(demo  calc)<br></code></pre></td></tr></table></figure><div class="note note-secondary">            <p>注意：<br>无论是静态库还是动态库，都需要在<code>target_link_libraries()</code>函数之前使用<code>link_directories()</code>函数，且需要在<code>add_executable()</code><br>函数之后使用。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>cmake</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cmake</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cmake学习笔记（二）</title>
    <link href="/2024/01/20/Cmake%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2024/01/20/Cmake%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在这样一个文件夹中</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">    目录: D:\Code\demo<br>    <br>Mode                 LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                 <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br><span class="hljs-literal">-a----</span>         <span class="hljs-number">2024</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span>      <span class="hljs-number">9</span>:<span class="hljs-number">55</span>             <span class="hljs-number">85</span> add.cpp<br><span class="hljs-literal">-a----</span>         <span class="hljs-number">2024</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span>      <span class="hljs-number">9</span>:<span class="hljs-number">55</span>             <span class="hljs-number">99</span> div.cpp<br><span class="hljs-literal">-a----</span>         <span class="hljs-number">2024</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span>      <span class="hljs-number">9</span>:<span class="hljs-number">55</span>            <span class="hljs-number">237</span> head.h<br><span class="hljs-literal">-a----</span>         <span class="hljs-number">2024</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span>      <span class="hljs-number">9</span>:<span class="hljs-number">56</span>            <span class="hljs-number">247</span> main.cpp<br><span class="hljs-literal">-a----</span>         <span class="hljs-number">2024</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span>      <span class="hljs-number">9</span>:<span class="hljs-number">56</span>             <span class="hljs-number">85</span> mult.cpp<br><span class="hljs-literal">-a----</span>         <span class="hljs-number">2024</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span>      <span class="hljs-number">9</span>:<span class="hljs-number">55</span>             <span class="hljs-number">87</span> sub.cpp<br></code></pre></td></tr></table></figure><p>我们要编译一个<code>main.cpp</code>文件要同时编译<code>add.cpp div.cpp mult.cpp sub.cpp</code>多个文件，就需要写一个<del>又臭又长</del>的命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">g++ <span class="hljs-literal">-o</span> a.exe main.cpp add.cpp sub.cpp mult.cpp div.cpp<br></code></pre></td></tr></table></figure><p>但我们要编辑的文件更多是，这个命令就不是一个普通程序员之力可以写出来的，<br>所以，我们就需要<strong>cmake</strong>来帮助我们来实现这个编译过程。</p><h3 id="1-创建CMakeLists文件"><a href="#1-创建CMakeLists文件" class="headerlink" title="1.创建CMakeLists文件"></a>1.创建CMakeLists文件</h3><p>首先在powershell中输入 <del>(其实直接右键 新建一个夹<strong>CMakeLists</strong>的文本文件就信了)</del></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">echo</span> CMakeLists.txt<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p><strong>注意</strong><br>文件名必须拼写正确，大小写区分</p>          </div><p>在<strong>CMakeLists</strong>中输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#cmake标准</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.27</span>)<br><span class="hljs-comment">#项目名称</span><br><span class="hljs-keyword">project</span>(demo)<br><br><span class="hljs-comment">#设置编译器</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br></code></pre></td></tr></table></figure><p>确定cmake最低标准、项目名称、编译器标准。</p><h3 id="2-利用add-executable-创建可执行文件"><a href="#2-利用add-executable-创建可执行文件" class="headerlink" title="2.利用add_executable ()创建可执行文件"></a>2.利用add_executable ()创建可执行文件</h3><p>add_executable()函数可以创建一个可执行文件，这个函数有两个参数，第一个参数是可执行文件的名称 <code>name</code><br>，第二个参数是需要编译的文件 <code>sourse</code>。</p><p>在这里我们需要编译的文件是<code>main.cpp add.cpp sub.cpp mult.cpp div.cpp</code>，所以我们在<strong>CMakeLists</strong>中输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_executable</span>(demo main.cpp add.cpp sub.cpp mult.cpp div.cpp)<br></code></pre></td></tr></table></figure><p>之后在powershell中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mkdir build                   <span class="hljs-comment">#创建一个build文件夹</span><br><span class="hljs-built_in">cd</span> build                      <span class="hljs-comment">#进入build文件夹</span><br>cmake <span class="hljs-literal">-G</span> <span class="hljs-string">&quot;MinGW Makefiles&quot;</span> .. <span class="hljs-comment">#生成makefile文件</span><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>在这命令中，<code>cmake -G &quot;MinGW Makefiles&quot; ..</code>是cmake的命令，去构建一个makefile文件，<code>-G</code><br>参数是指定生成的makefile文件的类型，这里我们使用的是<code>MinGW Makefiles</code>，因为我们使用的是<code>MinGW</code>编译器。 <code>..</code>是指定*<br><em>CMakeLists<strong>文件的路径，这里我们使用的是<code>..</code>因为我们在build文件夹中，而</strong>CMakeLists*</em><br>文件在上一级文件夹中，而cmake命令需要在<code>CMakelists.txt</code>文件的同级文件夹中执行。</p>          </div><p>在build文件夹中就会出现<strong>makefile</strong>文件。之后在powershell中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cmake <span class="hljs-literal">--build</span> .<br></code></pre></td></tr></table></figure><p>在build文件夹中就会出现可执行文件 demo.exe。</p><h3 id="3-利用set-函数与aux-source-directory-函数编译多个文件"><a href="#3-利用set-函数与aux-source-directory-函数编译多个文件" class="headerlink" title="3.利用set()函数与aux_source_directory()函数编译多个文件"></a>3.利用set()函数与aux_source_directory()函数编译多个文件</h3><p>在上面的例子中，我们使用了<code>add_executable()</code>函数来创建可执行文件，但是如果我们要编译的文件更多，那么这个命令就会变得很长，再本质上并没有改变我们的工作<br><del>甚至要打的内容更多了</del>。所以我们就需要一个变量去存储我们要编译的文件，而创建这个变量就需要<code>set()</code>函数。</p><p>在我们的<strong>CMakeLists</strong>中输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#设置源文件</span><br><span class="hljs-keyword">set</span>(SRC_LIST main.cpp add.cpp sub.cpp mult.cpp div.cpp)<br></code></pre></td></tr></table></figure><p>在这里我们将<code>main.cpp add.cpp sub.cpp mult.cpp div.cpp</code>存储在变量<code>SRC_LIST</code>中。</p><div class="note note-info">            <p>我们可以使用空格来分隔文件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(SRC_LIST main.cpp add.cpp sub.cpp mult.cpp div.cpp)<br></code></pre></td></tr></table></figure><p>也可以使用分号<code>;</code>来分隔文件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(SRC_LIST main.cpp;add.cpp;sub.cpp;mult.cpp;div.cpp)<br></code></pre></td></tr></table></figure>          </div><p>之后我们还要修改<code>add_executable()</code>函数中的值，改为</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_executable</span>(demo <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>我们使用${变量名}来获得变量的值</p>          </div><p>此时<code>CMakeLists.txt</code>内容如下</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#cmake标准</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.27</span>)<br><span class="hljs-comment">#项目名称</span><br><span class="hljs-keyword">project</span>(demo)<br><br><span class="hljs-comment">#设置编译器</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><br><span class="hljs-keyword">set</span>(SRC_LIST main.cpp;add.cpp;sub.cpp;mult.cpp;div.cpp)<br><br><span class="hljs-keyword">add_executable</span>(demo <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="4-利用aux-source-directory-函数查找文件"><a href="#4-利用aux-source-directory-函数查找文件" class="headerlink" title="4.利用aux_source_directory()函数查找文件"></a>4.利用aux_source_directory()函数查找文件</h3><p>使用<code>set()</code>后，我们的工作量实际上还是没有变化，因此，我们还需要使用<code>aux_source_directory()</code>函数实现查找功能。</p><p><code>aux_source_directory()</code>函数需要一个参数，即源文件所在的路径，在这里我们可以使用<code>CMAKE_SOURCE_DIR</code>（指向<code>CMakeLists.txt</code><br>文件所在的路径）这个宏来实现。此时，我们只需要在<code>CMakeList.txt</code>文件中写入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">aux_source_directory</span>( <span class="hljs-comment">#&#123;CMAKE_SOURCE_DIR&#125; SRC_LIST)</span><br></code></pre></td></tr></table></figure><p>此时修改后的<code>CMakeLists.txt</code>的内容为</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#cmake标准</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.27</span>)<br><span class="hljs-comment">#项目名称</span><br><span class="hljs-keyword">project</span>(demo)<br><br><span class="hljs-comment">#设置编译器</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><br><span class="hljs-keyword">aux_source_directory</span>( <span class="hljs-comment">#&#123;CMAKE_SOURCE_DIR&#125; SRC_LIST)</span><br><br><span class="hljs-keyword">add_executable</span>(demo <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="5-一些其它内容"><a href="#5-一些其它内容" class="headerlink" title="5.一些其它内容"></a>5.一些其它内容</h3><p>在实际中为使文件夹整洁，我们会对文件进行分类。此时我们的文件夹目录如下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">D:.<br>├─bin<br>├─build<br>├─include<br>└─src<br></code></pre></td></tr></table></figure><p><code>src</code>文件夹存储源文件，<code>include</code>文件夹存储头文件，<code>bin</code>文件夹存储可执行文件</p><p>因此，我们还需要设置头文件路径以及设置输出路径</p><h4 id="头文件路径"><a href="#头文件路径" class="headerlink" title="头文件路径"></a>头文件路径</h4><p>我们可以使用<code>include_directories()</code>函数来设置头文件路径，函数的参数就是头文件所在的路径</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br></code></pre></td></tr></table></figure><h4 id="输出路径"><a href="#输出路径" class="headerlink" title="输出路径"></a>输出路径</h4><p>可执行文件的输出路径由宏<code>EXECUTABLE_OUTPUT_PATH</code>决定，所以我们可以使用<code>SET()</code>函数来设置输出路径</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">SET</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/bin)<br></code></pre></td></tr></table></figure><h3 id="6-代码"><a href="#6-代码" class="headerlink" title="6.代码"></a>6.代码</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#cmake标准</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.27</span>)<br><span class="hljs-comment">#项目名称</span><br><span class="hljs-keyword">project</span>(demo)<br><br><span class="hljs-comment">#设置编译器</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><br><span class="hljs-comment">#设置头文件路径</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><br><span class="hljs-comment">#设置源文件</span><br><span class="hljs-keyword">aux_source_directory</span>(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src SRC_LIST)<br><br><span class="hljs-comment">#设置输出路径</span><br><span class="hljs-keyword">SET</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/bin)<br><br><span class="hljs-keyword">add_executable</span>(demo <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cmake</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cmake</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cmake学习笔记（一）</title>
    <link href="/2024/01/20/Cmake%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2024/01/20/Cmake%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Cmake"><a href="#Cmake" class="headerlink" title="Cmake"></a>Cmake</h1><p>C&#x2F;C++的编译过程中，通过命令处理多个文件的编译是及其复杂。如下所示：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs powershell">├─.idea<br>├─cmake<span class="hljs-literal">-build-debug</span><br>│  ├─.cmake<br>│  │  └─api<br>│  │      └─v1<br>│  │          ├─query<br>│  │          └─reply<br>│  ├─archive<br>│  ├─CMakeFiles<br>│  │  ├─<span class="hljs-number">3.27</span>.<span class="hljs-number">8</span><br>│  │  │  ├─CompilerIdC<br>│  │  │  │  └─tmp<br>│  │  │  └─CompilerIdCXX<br>│  │  │      └─tmp<br>│  │  ├─demo.dir<br>│  │  │  └─src<br>│  │  └─pkgRedirects<br>│  └─Testing<br>│      └─Temporary<br>├─include<br>└─src<br></code></pre></td></tr></table></figure><p>在这个文件夹中有很多文件需要编译，如果使用命令就进行编译，那么就需要输入很多命令，这样就会很麻烦。所以就需要一个工具来进行管理，这个工具就是<br><strong>cmake</strong>。</p><h3 id="1-1-Cmake的安装"><a href="#1-1-Cmake的安装" class="headerlink" title="1.1 Cmake的安装"></a>1.1 Cmake的安装</h3><p>在<a href="https://cmake.org/download/">cmake官网</a>下载对应的安装包，然后进行安装即可。</p><p>可通过</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cmake <span class="hljs-literal">--version</span><br></code></pre></td></tr></table></figure><p>检测<strong>cmake</strong>是否安装成功。</p><h3 id="2-1使用cmake编译c-文件"><a href="#2-1使用cmake编译c-文件" class="headerlink" title="2.1使用cmake编译c++文件"></a>2.1使用cmake编译c++文件</h3><p>在这个文件夹中，我们首先创建一个<strong>CMakeLists.txt</strong>文件，这个文件就是<strong>cmake</strong>的配置文件，利用这个文件我们就可以进行多文件的管理.</p><p>比如在上面这个文件夹中，我们创建一个<strong>CMakeLists.txt</strong>文件，内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#cmake标准</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.27</span>)<br><span class="hljs-comment">#项目名称</span><br><span class="hljs-keyword">project</span>(demo)<br><br><span class="hljs-comment">#设置编译器</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><br><span class="hljs-comment">#设置源文件</span><br><span class="hljs-keyword">aux_source_directory</span>(<span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/src SRC_LIST)<br><br><span class="hljs-comment">#设置头文件</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><br><span class="hljs-keyword">add_executable</span>(demo <span class="hljs-variable">$&#123;SRC_LIST&#125;</span> main.cpp)<br></code></pre></td></tr></table></figure><p>之后在powershell中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mkdir build<br><span class="hljs-built_in">cd</span> build<br>cmake <span class="hljs-literal">-G</span> <span class="hljs-string">&quot;MinGW Makefiles&quot;</span> ..<br></code></pre></td></tr></table></figure><p>然后文件夹中就会出现build文件夹，里面就有<strong>makefile</strong>文件。之后在powershell中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cmake <span class="hljs-literal">--build</span> .<br></code></pre></td></tr></table></figure><p>在build文件夹中就会出现可执行文件。</p><h3 id="2-2cmake-命令"><a href="#2-2cmake-命令" class="headerlink" title="2.2cmake 命令"></a>2.2cmake 命令</h3><p>在上面的例子中，我们使用了<strong>cmake</strong>的一些命令，下面就对这些命令进行介绍。</p><h4 id="cmake-minimum-required"><a href="#cmake-minimum-required" class="headerlink" title="cmake_minimum_required"></a>cmake_minimum_required</h4><p><code>cmake_minimum_required(VERSION 3.27)</code>是设置<strong>cmake</strong>的最低版本。</p><div class="note note-warning">            <p><strong>注意</strong><br>如果版本过低，而我们的<strong>cmake</strong>文件中使用了高版本的命令，那么就会报错。</p>          </div><h4 id="project（）"><a href="#project（）" class="headerlink" title="project（）"></a>project（）</h4><p><code>project(demo)</code>是设置项目名称。一般来说，这个名称和文件夹的名称是一样的。</p><h4 id="set（）"><a href="#set（）" class="headerlink" title="set（）"></a>set（）</h4><p><code>set(&lt;variable&gt; &lt;value&gt; [CACHE &lt;type&gt; &lt;docstring&gt; [FORCE]])</code>这个命令相当于一个变量的定义，其中<code>&lt;variable&gt;</code><br>是变量的名称，<code>&lt;value&gt;</code>是变量的值，<code>[CACHE &lt;type&gt; &lt;docstring&gt; [FORCE]]</code>是可选的，其中<code>CACHE</code>是缓存，<code>&lt;type&gt;</code><br>是类型，<code>&lt;docstring&gt;</code>是文档字符串，<code>[FORCE]</code>是强制。</p><div class="note note-info">            <p>在变量赋值中的<code>&lt;value&gt;</code>是可以是多个值的，比如<code>set(SRC_LIST main.cpp test.cpp)</code>，这样就可以将多个文件赋值给变量<code>SRC_LIST</code><br>，不同的值之间用空格或者 <strong>;</strong> 隔开。</p>          </div><h4 id="aux-source-directory（）"><a href="#aux-source-directory（）" class="headerlink" title="aux_source_directory（）"></a>aux_source_directory（）</h4><p><code>aux_source_directory(&lt;dir&gt; &lt;variable&gt;)</code>是一个所搜的指令，这个命令是将<strong>dir</strong><br>目录下的所有源文件名称赋值给变量<code>&lt;variable&gt;</code>。</p><h4 id="include-directories（）"><a href="#include-directories（）" class="headerlink" title="include_directories（）"></a>include_directories（）</h4><p><code>include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])</code>是一个包含目录的指令，这个命令是将编译时头文件指向**dir1<br>** [dir2 …]。</p><h4 id="add-executable（）"><a href="#add-executable（）" class="headerlink" title="add_executable（）"></a>add_executable（）</h4><p><code>add_executable(&lt;name&gt; [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] source1 [source2 ...])</code><br>是一个可执行文件的指令，这个命令是将源文件<code>source</code>编译成可执行文件<code>name</code>。</p><h3 id="cmake的宏"><a href="#cmake的宏" class="headerlink" title="cmake的宏"></a>cmake的宏</h3><p>在<strong>cmake</strong>中，有一些宏是可以直接使用的，这些宏可以直接使用，不需要进行定义。在这里，我将介绍我在上面的例子中使用的宏。</p><h4 id="CMAKE-SOURCE-DIR"><a href="#CMAKE-SOURCE-DIR" class="headerlink" title="CMAKE_SOURCE_DIR"></a>CMAKE_SOURCE_DIR</h4><p><code>CMAKE_SOURCE_DIR</code>是<strong>cmake</strong>的源文件目录，这个目录就是<strong>CMakeLists.txt</strong>所在的目录。</p><h4 id="CMAKE-CURRENT-SOURCE-DIR"><a href="#CMAKE-CURRENT-SOURCE-DIR" class="headerlink" title="CMAKE_CURRENT_SOURCE_DIR"></a>CMAKE_CURRENT_SOURCE_DIR</h4><p><code>CMAKE_CXX_STANDARD</code>是编译器的标准，这个标准是<strong>c++<strong>的标准，这里使用的是</strong>c++17</strong>的标准。</p>]]></content>
    
    
    <categories>
      
      <category>cmake</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cmake</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo与fluid搭建自己的blog</title>
    <link href="/2024/01/19/%E4%BD%BF%E7%94%A8hexo%E4%B8%8Efluid%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84blog/"/>
    <url>/2024/01/19/%E4%BD%BF%E7%94%A8hexo%E4%B8%8Efluid%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84blog/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>注意：</strong></p><p>本文文参考 hexo 与 fluid 的官方文档</p><p>具体内容请参考以下链接:</p><p><a href="https://hexo.io/zh-cn/docs/">hexo 官方文档</a></p><p><a href="https://fluid-dev.github.io/hexo-fluid-docs/start/">fluid 官方文档</a></p>          </div><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p>Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。即把用户的markdown文件，按照指定的主题解析成静态网页。</p><h3 id="1-1安装hexo"><a href="#1-1安装hexo" class="headerlink" title="1.1安装hexo"></a>1.1安装hexo</h3><div class="note note-warning">            <p>注意提前搭建 <strong>node.js</strong> 环境</p><p>可使用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm <span class="hljs-literal">-v</span><br></code></pre></td></tr></table></figure><p>检测 <strong>node.js</strong> 环境是否配置完成</p>          </div><p>可使用 <strong>npm</strong> 进行安装 <strong>hexo</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install <span class="hljs-literal">-g</span> hexo<span class="hljs-literal">-cli</span><br></code></pre></td></tr></table></figure><h3 id="1-2初始化blog"><a href="#1-2初始化blog" class="headerlink" title="1.2初始化blog"></a>1.2初始化blog</h3><p>在自己喜欢的文件夹中运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo init &lt;folder&gt;      <span class="hljs-comment"># 使用hexo初始化blog根目录，相当于新建文件夹</span><br><span class="hljs-built_in">cd</span> &lt;folder&gt;             <span class="hljs-comment"># 进入&lt;folder&gt;文件夹中</span><br>npm install             <span class="hljs-comment"># 安装npm依赖库</span><br></code></pre></td></tr></table></figure><p>完成上述命令后，Hexo就会自动在站点根目录中生成一系列用于生成博客的文件，再输入以下命令，就可以在本地浏览博客：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo g   <span class="hljs-comment"># 生成博客，等同于 hexo generate</span><br>hexo s   <span class="hljs-comment"># 本地预览，等同于 hexo server</span><br></code></pre></td></tr></table></figure><p>在浏览器中访问<code>http://localhost:4000</code>就可本地访问自己的blog</p><p>此时<code>folder</code>中的文件目录为这样</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell">|<span class="hljs-literal">--</span> _config.yml<br>|<span class="hljs-literal">--</span> node_modules<br>|<span class="hljs-literal">--</span> package<span class="hljs-literal">-lock</span>.json<br>|<span class="hljs-literal">--</span> package.json<br>|<span class="hljs-literal">--</span> scaffolds<br>|<span class="hljs-literal">--</span> source<br>|<span class="hljs-literal">--</span> themes<br>|<span class="hljs-literal">--</span> public<br>|<span class="hljs-literal">--</span> db.json<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>若在<code>source</code>新写一篇文章，请运行<code>hexo clean</code>以清除缓存</p>          </div><h3 id="2-1-将本地博客部署到GitHubPages"><a href="#2-1-将本地博客部署到GitHubPages" class="headerlink" title="2.1 将本地博客部署到GitHubPages"></a>2.1 将本地博客部署到GitHubPages</h3><p>最直接的方式使用git将本地博客文件夹关联到GitHub的远程仓库，并且把本地文件push到对应的仓库中。hexo提供了一种更为简洁的方式，只需要在<code>_config.yml</code>文件中进行配置并在命令行中输入相应命令就可以将本地博客发布到GitHubPages上。 首先，打开<code>_config.yml</code>文件，在deployment配置项下设置如下参数：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:你GitHub的用户名/你GitHub的用户名.github.io.git</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>然后，安装以下插件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install hexo<span class="hljs-literal">-deployer-git</span> <span class="hljs-literal">-save</span><br></code></pre></td></tr></table></figure><p>最后运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo d     <span class="hljs-comment">#相当于hexo deploy</span><br></code></pre></td></tr></table></figure><p>此时，在浏览器中输入<code>github用户名.github .io</code>，就可以在互联网上看到本地的博客了</p><h2 id="fluid"><a href="#fluid" class="headerlink" title="fluid"></a>fluid</h2><p>初看<strong>hexo</strong>自带的主题真的不怎么样，但是<strong>hexo</strong>可以使用大量的第三方主题。在这里我使用的就是<strong>fluid</strong>为主题</p><h3 id="3-1安装fliud"><a href="#3-1安装fliud" class="headerlink" title="3.1安装fliud"></a>3.1安装fliud</h3><p>官方提供了两种安装fluid的方式</p><h4 id="使用npm"><a href="#使用npm" class="headerlink" title="使用npm"></a>使用<strong>npm</strong></h4><p>在控制台中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install <span class="hljs-literal">--save</span> hexo<span class="hljs-literal">-theme-fluid</span><br></code></pre></td></tr></table></figure><h4 id="直接下载"><a href="#直接下载" class="headerlink" title="直接下载"></a>直接下载</h4><p>直接下载<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新的release版本</a>，解压到themes目录，并将解压出来的文件夹改名为<code>fluid </code></p><h3 id="3-2指定主题"><a href="#3-2指定主题" class="headerlink" title="3.2指定主题"></a>3.2指定主题</h3><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>     <span class="hljs-comment"># 指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h3 id="3-3创建关于页"><a href="#3-3创建关于页" class="headerlink" title="3.3创建关于页"></a>3.3创建关于页</h3><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 标题<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p><span class="label label-warning"><strong>WARNING</strong></span></p><p>layout: about 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p>          </div><h3 id="3-4更新主题"><a href="#3-4更新主题" class="headerlink" title="3.4更新主题"></a>3.4更新主题</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><div class="note note-info">            <p>适用于npm安装的用户</p>          </div><p>在博客目录下执行命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm update <span class="hljs-literal">--save</span> hexo<span class="hljs-literal">-theme-fluid</span><br></code></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><div class="note note-info">            <p>适用于通过 Release 压缩包安装主题，且没有自行修改任何代码的情况。</p>          </div><ol><li>先将原文件夹重命名为别的名称，例如 fluid-bkp，用于升级失败进行回退；</li><li>按照安装步骤，重新下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">release</a>并解压重命名为 <code>fluid</code>；</li><li>如果某些配置发生了变化（改名或弃用），release 的说明里会特别提示，同步修改原配置文件即可.</li></ol><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><div class="note note-info">            <p>适用于自定义了一些代码，或想体验其他分支的情况，以 dev 分支为例。</p>          </div><ol><li>确定自己的 fluid 目录已经开启 git，并且所有改动都已 commit；</li><li>把 fluid 仓库的 develop 分支拉取到自己当前的分支上（也可新建一个分支再拉取）：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git pull https://github.com/fluid<span class="hljs-literal">-dev</span>/hexo<span class="hljs-literal">-theme-fluid</span>.git develop<br></code></pre></td></tr></table></figure></li><li>解决代码冲突，保留自己修改的部分（如何解决冲突可自行搜索）。</li></ol>]]></content>
    
    
    <categories>
      
      <category>网页</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>网页</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
